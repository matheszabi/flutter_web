// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        //return android; - REMOVED
      case TargetPlatform.iOS:
        //return ios; - REMOVED
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions web = FirebaseOptions(
    apiKey: dotenv.env['apiKey'] ?? 'apiKey NOT FOUND' ,
    appId: dotenv.env['appId'] ?? 'appId NOT FOUND',
    messagingSenderId: dotenv.env['messagingSenderId'] ?? 'messagingSenderId NOT FOUND',
    projectId: dotenv.env['projectId'] ?? 'projectId NOT FOUND',
    authDomain: dotenv.env['authDomain'] ?? 'authDomain NOT FOUND',
    databaseURL: dotenv.env['databaseURL'] ?? 'databaseURL NOT FOUND',
    storageBucket: dotenv.env['storageBucket'] ?? 'storageBucket NOT FOUND',
    measurementId: dotenv.env['measurementId'] ?? 'measurementId NOT FOUND',
  );

}
